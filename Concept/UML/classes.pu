@startuml 

package model {
	class IconClassification {
		String name
		IconClassification* parent
		QVector<shared_ptr<IconClassification>> children
		QVector<shared_ptr<IconClassification::InsertCommand>> insertCommandChain
		bool immutable
		bool groupBy
		bool selected
		- setParent()
		+ addChild()
	}
	
	class IconSet {
		unique_ptr<QVector<Icon>> icons
		unique_ptr<IconClassification> classifications
		unique_ptr<QVector<IconGroup>> groups
		+delete/rename/insert/...Icon(int index)
	}
	
	class IconComponent {
		{abstract} const &QImage getRepresentativeImage()
	}
	
	class IconGroup {
		QVector<IconComponent *> children
	}
	
	class Icon {
		QString name
		QImage image
		Icon* link
		QVector<IconClassification*> classifications
		+setImage(QImage image)
		+setLink(QLink link)
		+isLinkType()
		+addClassification(shared_ptr<IconClassification classification)
		+insertIntoClassification(shared_ptr<IconClassification classification)
	}
	
	package access {
		class ClassificationTreeModel {
				IconSet* iconSet
			}
			
		class IconListModel {
			IconSet* iconSet
		}
		
		class IconSetObserver {
			+ {abstract} update()
		}
		ClassificationTreeModel --|> IconSetObserver
		IconListModel --|> IconSetObserver
	}
	
	Icon -- IconClassification
	IconSet *-- Icon
	IconSet *-- IconClassification
	IconSet .. IconSetObserver : notifies >
	IconClassification *-- IconClassification : organized as a tree
	IconComponent <|- Icon
	IconComponent <|-- IconGroup
	ClassificationTreeModel --> IconSet
	IconListModel --> IconSet
}


package view {
	class MainWindow {
	}
	
	class IconSetBrowser {
		QListView iconSetView
		QTreeView	classificationTreeView
	}
}


package control {
	class Coordinator {
		int activeIconSetIndex;
		QVector<IconSetOperator> openedIconSets
		+openIconSet(AbstractScannerStrategy scannerStrategy)
		..slots..
		+setActiveIconSet(int index)
<<<<<<< HEAD
		+deleteIcon(int index)
=======
		+delete/rename/insert/...Icon(int index)
>>>>>>> bd0b1c6744a09ea0fcbd8d6a709c91f4d0f00509
	}
	class IconSetOperator {
		unique_ptr<IconSet> iconSet
		unique_ptr<AbstractScannerStrategy> scannerStrategy
		unique_ptr<IconListModel> iconModel
		unique_ptr<ClassificationTreeModel> classificationModel
		QUndoStack undoStack
		+ IconSetOperator(AbstractScannerStrategy scannerStrategy)
		+ void performCommand(IconSetCommand command)
	}
	
	Coordinator *-IconSetOperator
}


package scannerstrategies {
		abstract class AbstractScannerStrategy {
			+ {abstract} unique_ptr<IconSet> loadIconSet()
			+ {abstract} boolean saveIconSet(const IconSet &iconSet)
		}
		class FreedesktopScannerStrategy --|> AbstractScannerStrategy
		class GenericXmlScannerStrategy --|> AbstractScannerStrategy
	}


MainWindow .. Coordinator : sends action signals >
MainWindow .. Coordinator : < sends update signals when active set switched
MainWindow *-- IconSetBrowser
IconSetBrowser .. IconListModel : < provides data
IconSetBrowser .. ClassificationTreeModel : < provides data
IconSetOperator *-- IconSet : owns >
IconSetOperator *-- AbstractScannerStrategy : owns >
IconSetOperator *-- IconListModel : owns >
IconSetOperator *-- ClassificationTreeModel : owns >
AbstractScannerStrategy --> IconSet : instantiates >


note top of GenericXmlScannerStrategy
A generic way of defining simple icon set structures 
via XML (or JSON?). Following this apporach <i>Icon Set Forge</i>
is hopefully useful for many "non-programmers".
endnote

@enduml