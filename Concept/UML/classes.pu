@startuml 

package control {
	abstract class AbstractScannerStrategy {
		+ {abstract} scanIcons()
		+ {abstract} scanClassifications()
	}
	package strategies {
		class FreedesktopScannerStrategy --|> AbstractScannerStrategy
		class GenericXmlScannerStrategy --|> AbstractScannerStrategy
	}
}

package view {
	class IconSetBrowser {
		IconSetView iconSetView
		QTreeView	classificationTreeView
		+ updateIconSet()
	}
	
	class MainWindow {
	}
}

MainWindow *-- IconSetBrowser

package model {
	class IconClassification {
		String name
		IconClassification* parent
		QVector<shared_ptr<IconClassification>> children
		- setParent()
		+ addChild()
	}
	
	class IconSet {
		unique_ptr<QVector<Icon>> icons
		unique_ptr<IconClassification> classifications
		unique_ptr<AbstractScannerStrategy> scannerStrategy 
	}
	
	class Icon {
		QImage image
		QVector<shared_ptr<IconClassification>> classifications
	}
	
	class ClassificationTreeModel {
		IconClassification root
	}
}

ClassificationTreeModel <|- QAbstractItemModel

IconSetBrowser o-- AbstractScannerStrategy

Icon -- IconClassification
IconSet *-- Icon
IconSet *-- IconClassification
IconSet o- AbstractScannerStrategy
IconSet --> ClassificationTreeModel
IconClassification *-- IconClassification

IconSetBrowser -- IconSet
IconSetBrowser -- ClassificationTreeModel

note bottom of IconClassification: Ways of classifying and grouping icons. For example "resolution, category or target device".\nTree structure is realized via the list of children and the parent pointer.

note top of FreedesktopScannerStrategy: An exemplary implementation\nthat parses index.theme files\nas often seen with Linux\nicon sets.

note top of GenericXmlScannerStrategy: A generic way of defining icon set structures via XML.\nIn case no specific file format is existant.\nFollowing this apporach Icon Set Forge is hopefully useful\nfor many "non-programmers".

note top of ClassificationTreeModel: Provides data for\nthe classification\nselection tree view

@enduml